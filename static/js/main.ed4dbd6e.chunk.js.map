{"version":3,"sources":["lib/index.js","lib/Table.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","measurementOnClick","e","measurementData","tableData","map","data","push","target","className","updateTableState","alert","colOnClick","classNames","split","selectedCol1","selectedColIndex","parseInt","length","selectedCol2","time","tableKeys","keys","_this2","TableRow","_ref2","m","i","react_default","a","createElement","key","style","background","concat","onClick","index","curTime","overflowX","_ref","measurements","clear","PureComponent","App","handleSubmit","preventDefault","jsonStr","value","replace","s","substring","json","JSON","parse","console","log","setState","state","m1","m2","Fragment","onSubmit","height","width","fontSize","placeholder","type","ref","element","lib","updateAbgTableState","selectedMeasurement","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ed4dbd6e.chunk.js","sourcesContent":["import Table from \"./Table\";\nexport default Table;","import React, { PureComponent } from \"react\";\nimport \"./Table.css\"\n\n// data = [{time: int, measurement1: int, measurement2: int...}]\n// key = [time, measurement1, meansurement2...]\nclass Table extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.tableKeys = this.props.data.keys\n        this.tableData = this.props.data.data\n    }\n    \n    measurementOnClick = (e) => {\n        let measurementData = []\n        this.tableData.map(data => {\n            measurementData.push([data[\"time\"], data[e.target.className]])\n        })\n\n        this.props.updateTableState(e.target.className)\n        alert(e.target.className + \" \" + measurementData)\n    }\n\n    colOnClick = (e) => {\n        let classNames = e.target.className.split(\" \")\n        let selectedCol1 = classNames[1]\n        let selectedColIndex = parseInt(classNames[2])\n\n        if (this.tableData.length === 1) {\n            selectedColIndex = 0\n        } else if (selectedColIndex === this.tableData.length - 1) {\n            selectedColIndex -= 1\n        } else {\n            selectedColIndex += 1\n        }\n\n        this.props.updateTableState({\n            selectedCol1: selectedCol1,\n            selectedCol2: this.tableData[selectedColIndex].time\n        })\n    }\n\n    render() {\n        if (!this.props.data) {\n            return null;\n        }\n\n        this.tableKeys = this.props.data.keys\n        this.tableData = this.props.data.data\n\n        const TableBody = ({ measurements }) => {\n            {\n                return (\n                    measurements.map((m, i) => {\n                        return (\n                            <TableRow key={m} m={m} i={i} />\n                        )\n                    })\n                )\n            }\n        }\n\n        const TableRow = ({ m, i }) => (\n            <tr\n                key={m + 1}\n                style={{\n                    background: i % 2 === 0 ? \"#EEEEEE\" : \"white\"\n                }}>\n                {   // first cell in the row is measurement label\n                    m === \"time\" ?\n                        <td className={m} key={m}></td> :\n                        <td className={`${m} ${\"firsttd\"}`}\n                            key={m}\n                            onClick={this.measurementOnClick}\n                        >\n                            {m}\n                        </td>\n                }\n                {this.tableData.map((data, index) => {\n                    let curTime = this.tableData[index].time\n                    return (\n                        <td\n                            className={`${m} ${curTime} ${index + \"td\"}`}\n                            key={index}\n                            onClick={this.colOnClick}\n                            style=\n                            // double ternary statements needed because the first row's \n                            // initial background is different than the rest\n                            {this.props.selectedCol1 === curTime ||\n                                this.props.selectedCol2 === curTime ?\n                                { background: \"rgba(247, 173, 229, 0.3)\" } : {}}\n                        >\n                            {data[m]}\n                        </td>\n                    )\n                })}\n            </tr>\n        )\n\n        return (\n            <div className=\"folder-table-container\">\n                <div\n                    className=\"folder-table\"\n                    style={{ overflowX: \"auto\" }}\n                >\n                    <table key=\"folder-table\">\n                        <tbody key=\"folder-table-body\">\n                            <TableBody measurements={this.tableKeys} />\n                        </tbody>\n                    </table>\n                    <br style={{ clear: \"both\" }} />\n                </div>\n            </div>\n        );\n\n    }\n}\n\nexport default Table;\n","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Table from \"./lib\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {\n                data: [{ time: \"11:00pm\", m1: \"54\", m2: \"443\" }],\n                keys: [\"time\", \"m1\", \"m2\"]\n            }\n        }\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault();\n        const data = this.data.value;\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":';\n        });\n\n        let json = JSON.parse(jsonStr)\n        console.log(json)\n        this.setState({\n            data: json\n        })\n        console.log(this.state)\n    }\n\n    updateAbgTableState() {\n        alert(\"update state\")\n    }\n\n    selectedMeasurement() {\n\n    }\n\n    selectedCol1() {\n\n    }\n\n    selectedCol2() {\n\n    }\n\n    render() {\n        console.log(this.state)\n        return (\n            <>\n                <div>Pass in data in the form: {'{data: [{time: \"1pm\", m1: \"54\", m2:\"443\" }], keys: [\"time\", \"m1\", \"m2\"]} '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"30px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <button>UPDATE TABLE</button>\n                </form>\n                <Table\n                    data={this.state.data}\n                    updateTableState={this.updateAbgTableState}\n                    selectedMeasurement={this.selectedMeasurement}\n                    selectedCol1={this.selectedCol1}\n                    selectedCol2={this.selectedCol2}\n                />\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}