{"version":3,"sources":["lib/index.js","lib/Table.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","measurementOnClick","e","measurementData","tableData","map","data","push","target","className","updateTableState","alert","colOnClick","neighborColIndex","classNames","split","selectedCol1","selectedColIndex","parseInt","length","console","log","dataset","unixtime","time","selectedCol2","tableKeys","keys","_this2","TableRow","_ref2","m","rowIndex","react_default","a","createElement","key","style","background","concat","onClick","colIndex","cellText","curTime","date","Date","format","data-unixtime","overflowX","_ref","measurements","i","clear","PureComponent","App","handleSubmit","preventDefault","jsonStr","value","replace","s","substring","json","JSON","parse","setState","state","m1","m2","Fragment","onSubmit","height","width","fontSize","placeholder","type","ref","element","lib","updateAbgTableState","selectedMeasurement","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c5aa9e83.chunk.js","sourcesContent":["import Table from \"./Table\";\nexport default Table;","import React, { PureComponent } from \"react\";\nimport { format } from 'date-fns';\nimport \"./Table.css\"\n\n// data = [{time: int, measurement1: int, measurement2: int...}]\n// key = [time, measurement1, meansurement2...]\nclass Table extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.tableKeys = this.props.data.keys\n        this.tableData = this.props.data.data\n    }\n\n    measurementOnClick = (e) => {\n        let measurementData = []\n        this.tableData.map(data => {\n            measurementData.push([data[\"time\"], data[e.target.className]])\n        })\n\n        this.props.updateTableState(e.target.className)\n        alert(e.target.className + \" \" + measurementData)\n    }\n\n    colOnClick = (e) => {\n        let classNames = e.target.className.split(\" \")\n        let selectedCol1 = classNames[1]\n        let selectedColIndex = parseInt(classNames[2])\n        let neighborColIndex\n\n        if (this.tableData.length === 1) {\n            neighborColIndex = 0\n        } else if (selectedColIndex === this.tableData.length - 1) {\n            neighborColIndex = selectedColIndex - 1\n        } else {\n            neighborColIndex = selectedColIndex + 1\n        }\n        console.log(e.target.dataset.unixtime, this.tableData[neighborColIndex].time)\n        this.props.updateTableState({\n            selectedCol1: selectedCol1,\n            selectedCol2: this.tableData[neighborColIndex].time\n        })\n    }\n\n    render() {\n        if (!this.props.data) {\n            return null;\n        }\n\n        this.tableKeys = this.props.data.keys\n        this.tableData = this.props.data.data\n\n        const TableBody = ({ measurements }) => {\n            {\n                return (\n                    measurements.map((m, i) => {\n                        return (\n                            <TableRow key={m} m={m} rowIndex={i} />\n                        )\n                    })\n                )\n            }\n        }\n\n        // creates the table row by row\n        const TableRow = ({ m, rowIndex }) => (\n            <tr\n                key={m + 1}\n                style={{\n                    background: rowIndex % 2 === 0 ? \"#EEEEEE\" : \"white\"\n                }}>\n                {   // first cell in the row is measurement label\n                    m === \"time\" ?\n                        <td className={\"folder-table-\" + m} key={m}></td> :\n                        <td className={`${\"folder-table-\" + m} ${\"firsttd\"}`}\n                            key={m}\n                            onClick={this.measurementOnClick}\n                        >\n                            {m}\n                        </td>\n                }\n                {this.tableData.map((data, colIndex) => {\n                    let curTime = this.tableData[colIndex].time\n                    let cellText\n\n                    if (rowIndex === 0) {\n                        let date = new Date(curTime * 1000)\n                        cellText = format(date, \"hh:MMA\")\n                    } else {\n                        cellText = data[m]\n                    }\n\n                    return (\n                        <td\n                            className={`${\"folder-table-\" + m} ${curTime} ${colIndex + \"td\"}`}\n                            data-unixtime={curTime}\n                            key={colIndex}\n                            onClick={this.colOnClick}\n                            style=\n                            // double ternary statements needed because the first row's \n                            // initial background is different than the rest\n                            {this.props.selectedCol1 === curTime ||\n                                this.props.selectedCol2 === curTime ?\n                                { background: \"rgba(247, 173, 229, 0.3)\" } : {}}\n                        >\n                            {cellText}\n                        </td>\n                    )\n                })}\n            </tr>\n        )\n\n        return (\n            <div className=\"folder-table-container\">\n                <div\n                    className=\"folder-table\"\n                    style={{ overflowX: \"auto\" }}\n                >\n                    <table key=\"folder-table\">\n                        <tbody key=\"folder-table-body\">\n                            <TableBody measurements={this.tableKeys} />\n                        </tbody>\n                    </table>\n                    <br style={{ clear: \"both\" }} />\n                </div>\n            </div>\n        );\n\n    }\n}\n\nexport default Table;\n","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Table from \"./lib\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {\n                data: [{ time: 14324324, m1: 54, m2: 443 }, { time: 14394324, m1: 45, m2: 403 }],\n                keys: [\"time\", \"m1\", \"m2\"]\n            }\n        }\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault();\n        const data = this.data.value;\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":';\n        });\n\n        let json = JSON.parse(jsonStr)\n        this.setState({\n            data: json\n        })\n    }\n\n    updateAbgTableState() {\n        alert(\"update state\")\n    }\n\n    selectedMeasurement() {\n\n    }\n\n    selectedCol1() {\n\n    }\n\n    selectedCol2() {\n\n    }\n\n    render() {\n        return (\n            <>\n                <div>Pass in data in the form: {'{data: [{time: \"156565656\", m1: \"54\", m2:\"443\" }, {time: \"165465466546\", m1: \"54\", m2:\"443\" }], keys: [\"time\", \"m1\", \"m2\"]} '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"50px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <button>UPDATE TABLE</button>\n                </form>\n                <Table\n                    data={this.state.data}\n                    updateTableState={this.updateAbgTableState}\n                    selectedMeasurement={this.selectedMeasurement}\n                    selectedCol1={this.selectedCol1}\n                    selectedCol2={this.selectedCol2}\n                />\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}