{"version":3,"sources":["lib/index.js","lib/Table.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","measurementOnClick","e","measurementData","tableData","map","data","push","time","value","target","dataset","rowlabel","updateTableState","name","colOnClick","neighborColIndex","classNames","className","split","selectedCol1","Number","selectedColIndex","parseInt","length","selectedCol2","tableKeys","keys","_this2","TableRow","_ref2","m","rowIndex","react_default","a","createElement","key","style","background","concat","data-rowlabel","onClick","colIndex","cellText","curTime","date","Date","format","data-unixtime","overflowX","_ref","measurements","i","clear","PureComponent","App","handleSubmit","preventDefault","jsonStr","replace","s","substring","json","JSON","parse","setState","objectSpread","state","m1","m2","bind","assertThisInitialized","newState","Fragment","onSubmit","height","width","fontSize","placeholder","type","ref","element","lib","selectedMeasurement","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9caf2bd9.chunk.js","sourcesContent":["import Table from \"./Table\";\nexport default Table;","import React, { PureComponent } from \"react\";\nimport { format } from 'date-fns';\nimport \"./Table.css\"\n\n// data = [{time: int, measurement1: int, measurement2: int...}]\n// key = [time, measurement1, meansurement2...]\nclass Table extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.tableKeys = this.props.data.keys\n        this.tableData = this.props.data.data\n    }\n\n    measurementOnClick = (e) => {\n        let measurementData = []\n\n        // update the store\n        this.tableData.map(data => {\n            measurementData.push({\n                time: data[\"time\"],\n                value: data[e.target.dataset.rowlabel]\n            })\n        })\n\n        this.props.updateTableState({\n            name: e.target.dataset.rowlabel,\n            data: measurementData\n        })\n    }\n\n    colOnClick = (e) => {\n        let classNames = e.target.className.split(\" \")\n        let selectedCol1 = Number(classNames[1])\n        let selectedColIndex = parseInt(classNames[2])\n        let neighborColIndex\n\n        if (this.tableData.length === 1) {\n            neighborColIndex = 0\n        } else if (selectedColIndex === this.tableData.length - 1) {\n            neighborColIndex = selectedColIndex - 1\n        } else {\n            neighborColIndex = selectedColIndex + 1\n        }\n\n        this.props.updateTableState({\n            selectedCol1: selectedCol1,\n            selectedCol2: this.tableData[neighborColIndex].time\n        })\n    }\n\n    render() {\n        if (!this.props.data) {\n            return null;\n        }\n\n        this.tableKeys = this.props.data.keys\n        this.tableData = this.props.data.data\n\n        const TableBody = ({ measurements }) => {\n            {\n                return (\n                    measurements.map((m, i) => {\n                        return (\n                            <TableRow key={m} m={m} rowIndex={i} />\n                        )\n                    })\n                )\n            }\n        }\n\n        // creates the table row by row\n        const TableRow = ({ m, rowIndex }) => (\n            <tr\n                key={m + 1}\n                style={{\n                    background: rowIndex % 2 === 0 ? \"#EEEEEE\" : \"white\"\n                }}>\n                {   // first cell in the row is measurement label\n                    m === \"time\" ?\n                        <td className={\"folder-table-\" + m} key={m}></td> :\n                        <td className={`${\"folder-table-\" + m} ${\"firsttd\"}`}\n                            data-rowlabel={m}\n                            key={m}\n                            onClick={this.measurementOnClick}\n                        >\n                            {m}\n                        </td>\n                }\n                {this.tableData.map((data, colIndex) => {\n                    let curTime = this.tableData[colIndex].time\n                    let cellText\n\n                    if (rowIndex === 0) {\n                        let date = new Date(curTime * 1000)\n                        cellText = format(date, \"hh:MMA\")\n                    } else {\n                        cellText = data[m]\n                    }\n\n                    return (\n                        <td\n                            className={`${\"folder-table-\" + m} ${curTime} ${colIndex + \"td\"}`}\n                            data-unixtime={curTime}\n                            key={colIndex}\n                            onClick={this.colOnClick}\n                            style=\n                            // double ternary statements needed because the first row's \n                            // initial background is different than the rest\n                            {this.props.selectedCol1 === curTime ||\n                                this.props.selectedCol2 === curTime ?\n                                { background: \"rgba(247, 173, 229, 0.3)\" } : {}}\n                        >\n                            {cellText}\n                        </td>\n                    )\n                })}\n            </tr>\n        )\n\n        return (\n            <div className=\"folder-table-container\">\n                <div\n                    className=\"folder-table\"\n                    style={{ overflowX: \"auto\" }}\n                >\n                    <table key=\"folder-table\">\n                        <tbody key=\"folder-table-body\">\n                            <TableBody measurements={this.tableKeys} />\n                        </tbody>\n                    </table>\n                    <br style={{ clear: \"both\" }} />\n                </div>\n            </div>\n        );\n\n    }\n}\n\nexport default Table;\n","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Table from \"./lib\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {\n                data: [\n                    { time: 14324324, m1: 54, m2: 443 },\n                    { time: 14394324, m1: 45, m2: 403 },\n                    { time: 1439434324, m1: 45, m2: 403 },\n                    { time: 1432435424, m1: 54, m2: 443 },\n                    { time: 16394324, m1: 45, m2: 403 },\n                    { time: 15394344, m1: 45, m2: 403 },\n                    { time: 154355444, m1: 54, m2: 443 },\n                    { time: 1639555424, m1: 45, m2: 403 },\n                    { time: 153945454, m1: 45, m2: 403 }],\n                keys: [\"time\", \"m1\", \"m2\"]\n            },\n            selectedCol1: null,\n            selectedCol2: null\n        }\n\n        this.updateTableState = this.updateTableState.bind(this)\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault();\n        const data = this.data.value;\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":';\n        });\n\n        let json = JSON.parse(jsonStr)\n        this.setState({\n            ...this.state,\n            data: json\n        })\n    }\n\n    updateTableState(newState) {\n        this.setState({\n            ...this.state,\n            ...newState\n        })\n    }\n\n    selectedMeasurement() {\n\n    }\n\n    render() {\n        return (\n            <>\n                <div>Pass in data in the form: {'{data: [{time: 156565656, m1: 54, m2: 443}, {time: 1654654546, m1: 54, m2: 443 }, {time: 16546546546, m1: 54, m2: 443 },  {time: 1654663146, m1: 54, m2: 443 },  {time: 1656546546, m1: 54, m2: 443 }, {time: 16534546, m1: 54, m2: 443 }, {time: 1656346546, m1: 54, m2: 443 }], keys: [\"time\", \"m1\", \"m2\"]} '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"50px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <button>UPDATE TABLE</button>\n                </form>\n                <Table\n                    data={this.state.data}\n                    updateTableState={this.updateTableState}\n                    selectedMeasurement={this.selectedMeasurement}\n                    selectedCol1={this.state.selectedCol1}\n                    selectedCol2={this.state.selectedCol2}\n                />\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}