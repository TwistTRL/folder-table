{"version":3,"sources":["lib/index.js","lib/Table.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rowLabelOnClick","e","handleRowLabelClick","rowData","tableData","map","data","push","time","value","target","dataset","rowlabel","colOnClick","neighborColIndex","classNames","className","split","selectedCol1","Number","selectedColIndex","parseInt","handleColClick","isNaN","length","selectedCol2","_this2","_this$props","tableKeys","keys","TableRow","_ref2","m","rowIndex","react_default","a","createElement","key","style","background","concat","data-rowlabel","onClick","colIndex","undefined","cellText","curTime","date","Date","fontSize","getMonth","getDate","getFullYear","toString","substr","format","data-unixtime","overflowX","_ref","rowLabels","i","clear","PureComponent","App","handleSubmit","preventDefault","jsonStr","replace","s","substring","json","JSON","parse","setState","objectSpread","state","console","log","m1","m2","updateTableState","bind","assertThisInitialized","newState","Fragment","onSubmit","height","width","placeholder","type","ref","element","lib","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fd065cd5.chunk.js","sourcesContent":["import Table from \"./Table\";\nexport default Table;","import React, { PureComponent } from \"react\";\nimport { format } from \"date-fns\";\nimport \"./Table.css\";\n\n// data = [{time: int, measurement1: int, measurement2: int...}]\n// key = [time, measurement1, meansurement2...]\nclass Table extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  rowLabelOnClick = e => {\n    if (!this.props.handleRowLabelClick) {\n      return;\n    }\n\n    let rowData = [];\n\n    // update the store\n    this.tableData.map(data => {\n      rowData.push({\n        time: data[\"time\"],\n        value: data[e.target.dataset.rowlabel]\n      });\n    });\n\n    this.props.handleRowLabelClick(e.target.dataset.rowlabel);\n  };\n\n  colOnClick = e => {\n    let classNames = e.target.className.split(\" \");\n    let selectedCol1 = Number(classNames[1]);\n    let selectedColIndex = parseInt(classNames[2]);\n    let neighborColIndex;\n\n    if (!this.props.handleColClick || isNaN(selectedCol1)) {\n      return;\n    }\n\n    if (this.tableData.length === 1) {\n      neighborColIndex = 0;\n    } else if (selectedColIndex === this.tableData.length - 1) {\n      neighborColIndex = selectedColIndex - 1;\n    } else {\n      neighborColIndex = selectedColIndex + 1;\n    }\n\n    this.props.handleColClick({\n      selectedCol1: selectedCol1,\n      selectedCol2: this.tableData[neighborColIndex].time\n    });\n  };\n\n  render() {\n    if (this.props.data.length < 1) {\n      return null;\n    }\n\n    let { selectedCol1, selectedCol2 } = this.props;\n    this.tableKeys = this.props.keys;\n    this.tableData = this.props.data;\n\n    const TableBody = ({ rowLabels }) => {\n      {\n        return rowLabels.map((m, i) => {\n          return <TableRow key={m} m={m} rowIndex={i} />;\n        });\n      }\n    };\n\n    // creates the table row by row\n    const TableRow = ({ m, rowIndex }) => (\n      <tr\n        key={m + 1}\n        style={{\n          background: rowIndex % 2 === 0 ? \"#EEEEEE\" : \"white\"\n        }}\n      >\n        {// first cell in the row is measurement label\n        m === \"time\" ? (\n          <td className={\"folder-table-\" + m} key={m}>\n            {\" \"}\n            Time{\" \"}\n          </td>\n        ) : (\n          <td\n            className={`${\"folder-table-\" + m} ${\"firsttd\"}`}\n            data-rowlabel={m}\n            key={m}\n            onClick={this.rowLabelOnClick}\n          >\n            {m}\n          </td>\n        )}\n        {this.tableData.map((data, colIndex) => {\n          if (data !== undefined) {\n            let curTime = this.tableData[colIndex].time;\n            let cellText;\n\n            if (rowIndex === 0) {\n              let date = new Date(curTime * 1000);\n\n              cellText = (\n                <div style={{ fontSize: \"9\" }}>\n                  {\" \"}\n                  {date.getMonth() +\n                    1 +\n                    \"/\" +\n                    date.getDate() +\n                    \"/\" +\n                    date\n                      .getFullYear()\n                      .toString()\n                      .substr(-2)}{\" \"}\n                  <br></br> {format(date, \"h:mma\")}{\" \"}\n                </div>\n              );\n            } else {\n              cellText = data[m];\n            }\n\n            return (\n              <td\n                className={`${\"folder-table-\" + m} ${curTime} ${colIndex +\n                  \"td\"}`}\n                data-unixtime={curTime}\n                key={colIndex}\n                onClick={this.colOnClick}\n                style={\n                  // initial background is different than the rest // double ternary statements needed because the first row's\n                  selectedCol1 === curTime || selectedCol2 === curTime\n                    ? { background: \"rgba(247, 173, 229, 0.3)\" }\n                    : {}\n                }\n              >\n                {cellText}\n              </td>\n            );\n          }\n        })}\n      </tr>\n    );\n\n    return (\n      <div className=\"folder-table-container\">\n        <div className=\"folder-table\" style={{ overflowX: \"auto\" }}>\n          <table key=\"folder-table\">\n            <tbody key=\"folder-table-body\">\n              <TableBody rowLabels={this.tableKeys} />\n            </tbody>\n          </table>\n          <br style={{ clear: \"both\" }} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Table from \"./lib/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n        data: [\n          { time: 14324324, m1: 54, m2: 443 },\n          { time: 14394324, m1: 45, m2: 403 },\n          { time: 1439434324, m1: 45, m2: 403 },\n          { time: 1432435424, m1: 54, m2: 443 },\n          { time: 16394324, m1: 45, m2: 403 },\n          { time: 15394344, m1: 45, m2: 403 },\n          { time: 154355444, m1: 54, m2: 443 },\n          { time: 1639555424, m1: 45, m2: 403 },\n          { time: 153945454, m1: 45, m2: 403 }\n        ],\n        keys: [\"time\", \"m1\", \"m2\"]\n      },\n      selectedCol1: null,\n      selectedCol2: null\n    };\n\n    this.updateTableState = this.updateTableState.bind(this);\n  }\n\n  handleSubmit = e => {\n    if (e) e.preventDefault();\n    const data = this.data.value;\n    var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function(s) {\n      return '\"' + s.substring(0, s.length - 1) + '\":';\n    });\n\n    let json = JSON.parse(jsonStr);\n    this.setState({\n      ...this.state,\n      data: json\n    });\n  };\n\n  updateTableState(newState) {\n    this.setState({\n      ...this.state,\n      ...newState\n    });\n  }\n\n  selectedMeasurement() {}\n\n  handleColClick = (e) => {\n    console.log(e)\n  }\n\n  handleRowLabelClick = (e) => {\n    console.log(e)\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          Pass in data in the form:{\" \"}\n          {\n            '{data: [{time: 156565656, m1: 54, m2: 443}, {time: 1654654546, m1: 54, m2: 443 }, {time: 16546546546, m1: 54, m2: 443 },  {time: 1654663146, m1: 54, m2: 443 },  {time: 1656546546, m1: 54, m2: 443 }, {time: 16534546, m1: 54, m2: 443 }, {time: 1656346546, m1: 54, m2: 443 }], keys: [\"time\", \"m1\", \"m2\"]} '\n          }\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            style={{\n              height: \"50px\",\n              width: \"50%\",\n              fontSize: \"14pt\"\n            }}\n            placeholder=\"data\"\n            type=\"text\"\n            ref={element => {\n              this.data = element;\n            }}\n          />\n          <button>UPDATE TABLE</button>\n        </form>\n        <Table\n          data={this.state.data.data}\n          keys={this.state.data.keys}\n          handleColClick={this.handleColClick}\n          handleRowLabelClick={this.handleRowLabelClick}\n          selectedCol1={this.state.selectedCol1}\n          selectedCol2={this.state.selectedCol2}\n        />\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}